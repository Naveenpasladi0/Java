-- Collection Framework Notes:
The Java Collection Framework provides a set of interfaces and classes to handle groups of objects. It includes implementations for common data structures such as lists, sets, and maps. Hereâ€™s a breakdown of the main components and an example to illustrate their usage.

- Key Interfaces in the Collection Framework:
1. Collection: The root interface of the collection hierarchy.
* List: Ordered collection (also known as a sequence). Allows duplicate elements.
-> Implementations: 'ArrayList', 'LinkedList', 'Vector', 'Stack'
* Set: A collection that does not allow duplicate elements.
-> Implementations: 'HashSet', 'LinkedHashSet', 'TreeSet'
* Queue: A collection used to hold multiple elements prior to processing. Typically orders elements in a FIFO (first-in-first-out) manner.
-> Implementations: 'LinkedList', 'PriorityQueue'
2. Map: An object that maps keys to values. A map cannot contain duplicate keys.
-> Implementations: 'HashMap', 'LinkedHashMap', 'TreeMap', 'Hashtable'

- Explanation:
1. ArrayList:
- An ArrayList is created and populated with strings.
- It allows duplicate elements, so "Apple" appears twice.
- Elements are accessed using a for-each loop.
2. HashSet:
- A HashSet is created and populated with strings.
- It does not allow duplicate elements, so "Apple" appears only once.
- Elements are accessed using a for-each loop.
3. HashMap:
- A HashMap is created to map strings to integers.
- Keys are unique; adding a duplicate key ("Apple") updates the value associated with that key.
- The entrySet() method is used to access the key-value pairs using a for-each loop.

Summary
-> ArrayList: A resizable array implementation of the List interface. Allows duplicate elements and maintains insertion order.
-> HashSet: A hash table-based implementation of the Set interface. Does not allow duplicate elements and does not maintain any order.
-> HashMap: A hash table-based implementation of the Map interface. Stores key-value pairs and does not allow duplicate keys.

The Java Collection Framework provides various classes and interfaces to handle different types of collections, making it a powerful tool for managing groups of objects efficiently.

**** Usages in real life websites or applications ****
->The Java Collection Framework is widely used in real-life websites and applications for various purposes due to its efficient data management capabilities. Here are some common scenarios where the Collection Framework is utilized:
1. E-commerce website
-> Shopping Cart Management:
- ArrayList or HashSet to store items in the shopping cart.
- HashMap to map products to their quantities.
-> Product Catalog:
- ArrayList to list all products.
- HashSet to ensure unique product IDs.
- TreeMap to sort products by categories or prices.

2. Social Media Platforms
-> User Data Management:
- HashMap to map user IDs to user profiles.
- HashSet to manage unique followers or following lists.
-> Feed Management:
- ArrayList to store a list of posts.
- PriorityQueue to manage posts by their timestamps or likes.

3. Banking and Financial Applications
-> Transaction Management:
- LinkedList to maintain a transaction history in chronological order.
- HashMap to map account numbers to their respective transaction lists.
-> Customer Data:
- ArrayList to store customer details.
- HashSet to manage unique account numbers.

4. Online Education Platforms
-> Course Management:
- HashMap to map course IDs to course details.
- ArrayList to list all courses a student is enrolled in.
-> Student Data Management:
- HashSet to ensure unique student IDs.
- TreeMap to sort students by their names or grades.

5. Travel and Booking Systems
-> Flight/Hotel Booking:
- HashMap to map booking IDs to booking details.
- ArrayList to store available flights or hotel rooms.
-> User Data Management:
- HashSet to manage unique booking references.
- LinkedList to maintain a history of user bookings.

6. Gaming Applications
-> Player Data Management:
- HashMap to map player IDs to player profiles.
- ArrayList to store the list of players in a game session.
-> Game State Management:
- HashSet to ensure unique items or power-ups collected.
- PriorityQueue to manage events based on priority.