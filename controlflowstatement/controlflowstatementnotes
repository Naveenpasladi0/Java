-- Control flow statements :- Control flow statement in java allow you to control the order in which statements are executed based on certain conditions. These include conditional statements, looping statements, and branching statements. Here's a detailed overview:

1. Conditional Statements
1.1 - if statement
- The 'if' statement allows you to execute a block of code only if a specific condition is true.

1.2 - if-else statement
- The 'if-else' statements provides an alternative block of code that runs if the condition is false.

1.3 - if-else-if ladder statement
- The 'if-else-if' ladder allows you to test multiple conditions sequentially.

1.4 - switch statement
- The 'switch' statement allows a variable to be tested against a list of values (cases), and executes the corresponding block of code.

2. Looping Statements
2.1 - for loop
- The 'for loop' statement loop is used to repeat a block of code a specified number of times.

2.2 - enhanced for loop (for-each loop)
- The 'enhanced for loop' statement is used to iterate over element in an array or a collection.

2.3 - while loop
- The 'while' loop repeats a block of code as long as a specified condition is true.

2.4 - do-while loop
- The 'do-while' loop is similar to the 'while' loop, but it guarantees that the block of code is executed at least once.

3. Branching Statements
3.1 - break statement
- The 'break' statement is used to exit from a loop or 'switch' statement.

3.2 - continue statement
- The 'continue' statement is used to skip the current iteration of a loop and proceed to the next iteration.

3.3 - return statement
- The 'return' statement is used to exit from a method and optionally return a value.

4. Exception Handeling Statements:- Although not strictly control flow statements, exception handling is crucial for managing flow in the presence of errors.
4.1 - try-catch-finally Block
- Used to handle exceptions and clean up resources.

-------------Summary-------------

Control flow statements are essential for writing flexible and powerful Java programs. They help you manage the execution path of your code based on conditions and repetitive tasks, and handle exceptional situations gracefully. Understanding these constructs is fundamental for any Java programmer.