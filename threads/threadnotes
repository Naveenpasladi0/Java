There are two ways to create thread.

1. By extending thread class.
2. By implementing runnable interface.

1 -> Thread class:- Thread class provide constructors and methods to create and perform operations on a thread.Thread class extends Object class and implements Runnable interface.
-- Commonly used constructors of thread class:-
-> Thread()
-> Thread(String name)
-> Thread(Runnable r)
-> Thread(Runnable r,String name)

-- Commonly used method of thread class:-
1. Public void run(): is used to perform action for a thread.
2. public void start(): starts the execution of the thread JVM calls the run() method on the thread.
3. public void sleep(long milliseconds): Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.
4. public void join(): waits for a thread to die.
5. public void join(long milliseconds): waits for a thread to die for a specified milliseconds.
6. public int getPriority(); returns the priority of a thread.
7. public int setPriority(int priority): changes the priority of the thread.
8. public String getName(): returns the name of the thread.
9. public void setName (String name): changes the name of the thread.
10. public Thread currentThread(): returns the reference of currently executing thread.
11. public int getId(): returns the id of the thread.
12. public Thread.State getState(): returns the state of the thread.
13. public boolean isAlive(): tests if the thread is alive.
14. public void yield(): causes the currently executing thread object to temporarily pause and allow other threads to execute.
15. public void suspend(): is used to suspend the thread(depricated).
16. public void resume(): is used to resume the suspended thread(depricated).
17. public void stop(): is used to stop the thread(depricated).
18. public boolean isDaemon(): tests if the thread(depricted).
19. public void setDaemon(boolean b): marks the threads as daemon or user thread.
20. public void interrupt(): interrupts the threads.
21. public boolean isInterrupted(): tests if the thread has been interrupted.
22. public static boolean interrupted(): tests if the current thread has been interrupted.

2 -> Runnable Interface :- The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread. Runnable interface have only one method name run().

2.1 public void run(): is used to perform action for a thread.
Starting a thread:
The start()method of Thread class is used to start a newly created thread. It performs the following tasks:

-> A new thread starts(with new callstack).
-> The thread moves from New state to the Runnable state.
-> When the thread gets a chance to execute, its target run() method will run.

If you are extending the Thread Class, your class object would not be treated as a thread object. So you need to explicitly create the Thread class object. We are passing the object of your class that implements Runnable so that your class run() method may execute.

3 -> Using the Threads Class: Thread(String Name) :- We can directly use the Thread to class to spawn new threads using the constructors defined above.
3.1 - Thread Name :- Threads in Java can be assigned names for identification and debugging purposes.
. Naming threads can be useful in understanding the purpose of each thread in a multi-threaded application.
3.2 - Thread Constructor With Name :- The Thread class has a constructor that accepts a String parameter for setting the name of the thread.
Thread thread = new Thread("MyThread");
. This sets the name of the thread to "MyThread."
3.3 - Setting Thread Name :- Alternatively, you can set the thread name using the setName method.
thread.setName("MyThread");
3.4 - Getting Thread Name :- Retrieve the name of a thread using the getName method.
String threadName = thread.getName();
3.5 - Best Practices :- Choose descriptive names that reflect the purpose of the thread.
. Meaningful thread names aid in debugging and understanding the flow of a multi-threaded application.

4 -> Using the Thread Class: Thread(Runnable r, String name)
4.1 - Thread Constructor with Runnable and Name :- The Thread class has a constructor that accepts a Runnable instance and a String parameter for setting the name of the thread.
Runnable myRunnable = new MyRunnable();
Thread thread = new Thread(myRunnable, "MyThread");
. This creates a new thread with the given Runnable and assigns the specified name.
4.2 - Setting Thread Name :- Alternatively, you can set the thread name using the setName method.
thread.setName("MyThread");
4.3 - Getting Thread Name :- Retrieve the name of a thread using the getName method.
String threadName = thread.getName();
4.4 - Best Practices :- Choose descriptive names that reflect the purpose of the thread.
. Meaningful thread names aid in debugging and understanding the flow of a multi-threaded application.